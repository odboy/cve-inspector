# !/usr/bin/env python3
# -*- coding: utf-8 -*-
# Author: Mr.Bingo@猎户实验室


import sys
import time
import argparse
import threading
import importlib
from lib.common.utils import *
from lib.common.banner import banner
from config.config import *
import config.config as config
from lib.database import Database
from lib.Modles import Vuln
from sqlalchemy import and_, or_
import ipdb

import logging

# 原计划实现对Python版本判断，但疑似python2在运行前便对整个脚本进行了语法校验，如此导致大量错误。
# if not check_python_version(3):
#     sys.exit()

db = Database()
db.db_init()


def spider(spider_plugin):
    global db
    # plugin_path = os.path.join(configs.get('plugin_dir'), spider_plugin)
    try:
        print()  # 换行
        print("[*] Loading spider plugin :: < %s >" % spider_plugin, end="")
        plugin = importlib.import_module("lib.plugins.%s"%spider_plugin[:-3])
        print("\tSuccess.")
        Spider = getattr(plugin, "Spider")
        # print(Spider)
    except Exception as e:
        print("[*] Something wrong with run < %s >"%spider_plugin)
        print("[*] Error - %s" % str(e))
        return
    dbsession = db.db_session()
    spider = Spider(dbsession)
    result, e = spider.get_vulns()
    if not result:
        print(e)

def dispatch(spider_plugins, multithread):
    thread_arr = []
    if multithread:
        for i in spider_plugins:
            t = threading.Thread(target=spider, args=(i,))
            thread_arr.append(t)
        for i in range(len(thread_arr)):
            thread_arr[i].start()
        for i in range(len(thread_arr)):
            thread_arr[i].join()
    else:
        for i in spider_plugins:
            spider(i)

def deliver(conf, vulninfo):
    '''
    动态调用发送模块
    :param conf:
    :param vulninfo:
    :return:
    '''
    deliver_plugin = conf["deliver"]["module_name"]
    try:
        print("[*] Loading deliver plugin :: < %s.py >" % deliver_plugin, end="")
        plugin = importlib.import_module("lib.plugins.%s"%deliver_plugin)
        print("\tSuccess.")
        Deliver = getattr(plugin, "Deliver")

    except Exception as e:
        print("[*] Something wrong with loading < %s.py >"%deliver_plugin)
        print("[*] Error - %s" % str(e))
        return (deliver_plugin, False)

    deliver = Deliver(conf)
    result = deliver.do_deliver(vulninfo)

    return (deliver_plugin, result) # 返回发送结果

def deliver_loder(vulns):
    '''
    读取配置，发送漏洞信息。
    :param vulns:
    :return:
    '''
    # 读取配置文件
    fp = openCreate(configs.get('deliver_config_path'), "r")
    try:
        confjson = json.load(fp)
    except json.JSONDecodeError: # JSONDecodeError class is available starting from 3.5.x, (ValueError before 3.4).
        print("[*] Error - Parse json file ( %s )" % (configs.get('deliver_config_path')))
        return
    finally:
        fp.close()
    # print(type(confjson))
    # print(json.dumps(confjson, indent=2))

    # 搜索deliver插件列表
    deliver_plugins = []
    for rawfile in os.listdir(configs.get('plugin_dir')):
        if re.match(r'^deliver_.*\.py$', rawfile):
            deliver_plugins.append(rawfile[:-3])

    # 刷选具有配置信息的插件
    conflist = []
    for conf in confjson:
        if conf["deliver"]["module_name"] in deliver_plugins:
            print("[*] Found deliver plugin :: < %s >" % (conf["deliver"]["module_name"]))
            conflist.append(conf)

    # 根据配置信息，引入相应的模块, 调用插件，发送信息。
    result = []
    successCount = 0
    for conf in conflist:
        result.append(deliver(conf, vulns))

    for r in result:
        # print(r)
        if r[1]:
            successCount += 1
    if successCount == len(result):
        print("\n[*] Deliver All Success :: %d / %d" % (successCount, len(result)))
        return True
    elif successCount > 0:
        print("\n[*] Deliver Part Success :: %d / %d" % (successCount, len(result)))
        return True
    else:
        print("\n[*] Deliver Totally Failed :: %d / %d" % (successCount, len(result)))
        return False

def main():
    banner()
    # Creating a parser
    parser = argparse.ArgumentParser()
    #
    parser.add_argument('--mt', dest='multithreads', action='store_true', default=False, help="启动多线程(每个来源一个进行)")
    # parser.add_argument("-c", dest="count", type=int, default=3, help="请求次数")
    #
    # parser.add_argument('-o', dest='outputdir', default="/Users/bingo/temp/", help="将结果数据自动保存")

    args = parser.parse_args()

    while True:
        print("\n******************** %s ********************\n"%time.strftime("%Y-%m-%d %H:%M:%S"))
        # 遍历漏洞收集插件
        spider_plugins = []
        for rawfile in os.listdir(configs.get('plugin_dir')):
            # logging.info(rawfile)
            if re.match(r'^spider_.*\.py$', rawfile):
                print("[*] Found spider plugin :: < %s >" % (rawfile))
                spider_plugins.append(rawfile)

        # 启动线程调用收集插件
        dispatch(spider_plugins, args.multithreads)

        # 查询数据库，获取待发送的漏洞信息。
        print()
        print("[*] Querying new focused vulns...")
        dbsession = db.db_session()
        try:
            # query = dbsession.query(Vuln).filter(and_(Vuln.isNotified == None, Vuln.impact_baseScore > 9))
            # query = dbsession.query(Vuln).filter(and_(Vuln.isNotified == None, or_(Vuln.impact_baseSeverity == 'CRITICAL',Vuln.impact_baseSeverity == 'IMPORTANT')))
            query = dbsession.query(Vuln).filter(and_(Vuln.isNotified == None, Vuln.impact_baseSeverity == 'CRITICAL'))
            # ipdb.set_trace()
        except:
            print("[*] Error - Something wrong when query vulns.")
            pass
        result = []
        for row in query:
            result.append(row.to_dict())
        vulns = result

        if len(vulns) > 0:
            vulnIDlist = []
            for v in vulns:
                vulnIDlist.append(v["vulnID"])
            print("[*] Found %d focused vulns ( %s )"%(len(vulnIDlist)," | ".join(vulnIDlist)))

            # 读取发送配置信息，加载deliver插件。
            success = deliver_loder(vulns)

            # 发送成功后更新数据库
            if success:
                try:
                    query.update({'isNotified': True})
                    dbsession.commit()
                    print("[*] Vulns be marked as send, it won't be sent anymore.")
                except Exception as e:
                    print("[*] Vulns be marked Failed, it will be sent later.")
                    logging.debug(e)
                finally:
                    dbsession.close()

        else:
            print("[*] There is no new vulns.")
            dbsession.close()
        print("\n[*] Sleeping half hour...")

        # 半小时一次大循环，每分钟刷新一次watchdog.txt文件。
        for i in range(30): # 半小时一次查询
            with open("watchdog.txt", 'w') as fp:
                fp.write("Script is running... [%s]\n"%time.strftime("%Y-%m-%d %H:%M:%S%z"))
            for j in range(12):
                print("\rScript is running... [%s]"%time.strftime("%Y-%m-%d %H:%M:%S%z"),end="")
                time.sleep(5)
                print(" \b\b" * 100, end="")
            # print()

    # print("\n[*] Done!!!\n")

if __name__ == "__main__":
    main()