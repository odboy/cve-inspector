# !/usr/bin/env python3
# -*- coding: utf-8 -*-
# Author: Mr.Bingo@猎户实验室

import os
import re
import json
import fcntl
import datetime
import logging

FORMAT = '==> %(message)s'
logging.basicConfig(level=logging.WARNING, format=FORMAT)

root_dir = os.path.abspath(os.path.dirname(os.path.dirname(__file__)))
config_dir = os.path.abspath(os.path.dirname(__file__))

configs = {
    'title'         :   "CVEi (A inspector of Common Vulnerabilwities and Exposures)",
    'author'        :   "Mr.Bingo@猎户实验室",
    'root_dir'      :   root_dir,
    'db_path'       :   os.path.join(root_dir,'CVEi.db'),
    'sipder_config_path'   :   os.path.join(config_dir,"spider_config.json"),
    'deliver_config_path'   :   os.path.join(config_dir,"deliver_config.json"),
    'plugin_dir'   :   os.path.join(root_dir,'lib/plugins'),
    'urls'          :   {
        "cve_url"	        : "http://cve.mitre.org/cgi-bin/cvename.cgi?name=",
        "cwe_url"	        : "https://cwe.mitre.org/data/definitions/",
        "capec_url"	        : "https://capec.mitre.org/data/definitions/",
        "osvdb_url"	        : "http://www.osvdb.org/",
        "bid_url"	        : "http://www.securityfocus.com/bid/",
        "ibm_url"	        : "http://www-01.ibm.com/support/docview.wss?uid=swg1",
        "redhat_url"	    : "https://rhn.redhat.com/errata/",
        "redhat_oval_url"	: "https://www.redhat.com/security/data/oval/com.redhat.rhsa-",
        "bugzilla_url"	    : "https://bugzilla.redhat.com/show_bug.cgi?id=",
        "debian_url"	    : "https://security-tracker.debian.org/tracker/",
        "suse_url"	        : "https://www.suse.com/security/cve/",
        "ubuntu_url"	    : "http://www.ubuntu.com/usn/",
        "gentoo_url"	    : "https://security.gentoo.org/glsa/",
        "fedora_url"	    : "https://admin.fedoraproject.org/updates/",
        "mandriva_url"	    : "http://www.mandriva.com/security/advisories?name=",
        "vmware_url"	    : "https://www.vmware.com/security/advisories/",
        "edb_url"	        : "http://www.exploit-db.com/exploits/",
        "oval_url"	        : "https://oval.cisecurity.org/repository/search/definition/",
        "nmap_url"	        : "https://nmap.org/nsedoc/scripts/",
        "wasc_url"	        : "http://projects.webappsec.org/",
    }
}


def openCreate(filename, mode, encoding="utf-8"):
    """
    open a file, create it if it not exist.
    :param filename:
    :param mode:
    :param encoding:
    :return:
    """
    fp = None
    try:
        fp = open(filename, mode, encoding=encoding)
    except IOError:
        with open(filename, "w", encoding=encoding):
            pass
        fp = open(filename, mode, encoding=encoding)
    finally:
        return fp


def get_lastUpdate(source):
    source = source.lower()
    fp = openCreate(configs.get('sipder_config_path'), "r")
    try:
        confjson = json.load(fp)
    except json.JSONDecodeError:
        # print("Invaliable json file, read as a empty json")
        confjson = {}
    finally:
        fp.close()
    # print(type(confjson))
    if source in confjson.keys():
        if 'lastUpdateTime' in confjson[source].keys() and 'lastUpdateHash' in confjson[source].keys():
            return confjson[source]['lastUpdateTime'], confjson[source]['lastUpdateHash']
    return None, None


def set_lastUpdate(source,
                   lastUpdateTime="",
                   lastUpdateHash="",
                   lastTouchTime=datetime.datetime.now().isoformat()):
    # 读取配置文件
    fp = openCreate(configs.get('sipder_config_path'), "r")
    try:
        confjson = json.load(fp)
    except json.JSONDecodeError:
        # print("Invaliable json file, read as a empty json")
        confjson = {}
    finally:
        fp.close()

    # 修改dict
    source = source.lower()

    confjson[source]={"lastUpdateTime":lastUpdateTime,
                      "lastUpdateHash":lastUpdateHash,
                      "lastTouchTime":lastTouchTime
                      }
    # print(confjson)
    # 存入config.json
    fp = open(configs.get('sipder_config_path'), "w", encoding="utf-8")
    fcntl.flock(fp, fcntl.LOCK_EX)  #
    json.dump(confjson, fp, indent=2)
    fcntl.flock(fp, fcntl.LOCK_UN)
    fp.close()




if __name__ == "__main__":
    lastUpdateTime, lastUpdateHash = get_lastUpdate("test")
    if lastUpdateHash is None:
        set_lastUpdate("test", "", "")
