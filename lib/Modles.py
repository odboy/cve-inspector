# !/usr/bin/env python3
# -*- coding: utf-8 -*-
# Author: Mr.Bingo@猎户实验室

from sqlalchemy import create_engine, Column, Integer, String, Float,Boolean , Sequence
from sqlalchemy.ext.declarative import declarative_base


BaseModle = declarative_base()

class Vuln(BaseModle):

    def __init__(self, rawcve):
        pass  # 可能需要处理格式文件

        for a, b in rawcve.items():
            setattr(self, a, b if isinstance(b, (int, str, float)) else None)

    __tablename__ = 'vuln'
    identifier = Column(String, primary_key=True)
    title = Column(String)  # 漏洞标题
    dataSource = Column(String(50)) # 信息来源 CVE or Cisco or Microsoft etc.
    vulnID = Column(String(50))     # 漏洞编号
    sourceURL = Column(String)      # 信息来源URL
    affects = Column(String)        # 影响产品及版本
    problemtype = Column(String)    # 脆弱类型 https://nvd.nist.gov/vuln/categories
    references = Column(String)     # 参考链接
    description = Column(String)    # 描述信息
    configurations = Column(String)  # ？？？？ 暂时不处理
    impact_baseScore = Column(Float)  # 基础评分
    impact_baseSeverity = Column(String(20))  # 严重性等级 CRITICAL, HIGH, MEDUIM, LOW, INFORMATIONAL
    impact_impactScore = Column(Float)  # 影响程度评分
    impact_exploitabilityScore = Column(Float)  # 可利用性评分
    publishedDate = Column(String)  # "2018-01-10T22:29Z"
    lastModifiedDate = Column(String)  # "2018-02-15T16:58Z"
    lastTouchTime = Column(String)

    # 其它控制字段
    isNotified = Column(Boolean)  #

    def __repr__(self):
        return "ID :: %s\nImpact_baseSeverity :: %s\nTitle :: %s" \
               % (self.vulnID, str(self.impact_baseSeverity), self.title)

    def to_dict(self):
        return {c.name: getattr(self, c.name) for c in self.__table__.columns}

