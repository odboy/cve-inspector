# !/usr/bin/env python3
# -*- coding: utf-8 -*-
# Author: Mr.Bingo@猎户实验室
# dataSource :: https://portal.msrc.microsoft.com/en-us/security-guidance


import os
import io
import json
import datetime
import time
import requests
import re
import zipfile
import logging
import hashlib

from lib.plugins.base_spider import BaseSpider
from lib.common.utils import *
from lib.Modles import Vuln
from lib.database import Database
import config.config as config

sourceName = 'MicrosoftSRC'

class CVE(Vuln):
    def __init__(self,v):
        #  格式化数据
        for a, b in v.items():
            setattr(self, a, b if isinstance(b, (int, str, float)) else None)


class Spider(BaseSpider):
    def __init__(self, dbsession):
        self.dbsession = dbsession
        self.result = []
        self.vulnURL = "https://portal.msrc.microsoft.com/api/security-guidance/en-us"  # POST包
        '''
POST /api/security-guidance/en-us HTTP/1.1
Host: portal.msrc.microsoft.com
Connection: close
Content-Length: 384
Accept: application/json, text/plain, */*
Origin: https://portal.msrc.microsoft.com
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36
Content-Type: application/json;charset=UTF-8
Referer: https://portal.msrc.microsoft.com/en-us/security-guidance
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7,zh-TW;q=0.6

{"familyIds":[],"productIds":[],"severityIds":[1,2],"impactIds":[],"pageNumber":1,"pageSize":9999,"includeCveNumber":true,"includeSeverity":true,"includeImpact":true,"orderBy":"publishedDate","orderByMonthly":"releaseDate","isDescending":true,"isDescendingMonthly":true,"queryText":"","isSearch":false,"filterText":"","fromPublishedDate":"07/11/2018","toPublishedDate":"08/16/2018"}
        '''


    def __arrangeVuln(self,rawjson):
        for vuln in rawjson:
            '''
{
        "publishedDate": "2018-08-14T07:00:00",
        "cveNumber": "CVE-2018-8343",
        "cveUrl": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8343",
        "name": "Windows Server 2008 R2 for x64-based Systems Service Pack 1",
        "platform": null,
        "family": "Windows",
        "impactId": 2,
        "impact": "Elevation of Privilege",
        "severityId": 2,
        "severity": "Important",
        "knowledgeBaseId": null,
        "knowledgeBaseUrl": null,
        "monthlyKnowledgeBaseId": null,
        "monthlyKnowledgeBaseUrl": null,
        "downloadUrl": null,
        "downloadTitle": null,
        "monthlyDownloadUrl": null,
        "monthlyDownloadTitle": null,
        "articleTitle1": "4343900",
        "articleUrl1": "https://support.microsoft.com/help/4343900",
        "downloadTitle1": "Monthly Rollup",
        "downloadUrl1": "https://catalog.update.microsoft.com/v7/site/Search.aspx?q=KB4343900",
        "doesRowOneHaveAtLeastOneArticleOrUrl": true,
        "articleTitle2": "4343899",
        "articleUrl2": "https://support.microsoft.com/help/4343899",
        "downloadTitle2": "Security Only",
        "downloadUrl2": "https://catalog.update.microsoft.com/v7/site/Search.aspx?q=KB4343899",
        "doesRowTwoHaveAtLeastOneArticleOrUrl": true,
        "articleTitle3": "",
        "articleUrl3": null,
        "downloadTitle3": "",
        "downloadUrl3": null,
        "doesRowThreeHaveAtLeastOneArticleOrUrl": false,
        "articleTitle4": "",
        "articleUrl4": null,
        "downloadTitle4": "",
        "downloadUrl4": null,
        "doesRowFourHaveAtLeastOneArticleOrUrl": false,
        "countOfRowsWithAtLeastOneArticleOrUrl": 2
    }
            '''
            ripecve = {}
            ripecve['dataSource'] = sourceName
            ripecve['title'] = vuln['cveNumber'] + vuln['impact']
            ripecve['vulnID'] = vuln['cveNumber']
            ripecve['identifier'] = sourceName+"."+vuln['cveNumber']
            ripecve['sourceURL'] = vuln['cveUrl']
            temp = []
            if vuln['family']:
                temp.append(vuln['family'])
            # if vuln['platform']:
            #     temp.append(vuln['platform'])
            if vuln['name']:
                temp.append(vuln['name'])
            ripecve['affects'] = " | ".join(temp)
            ripecve['problemtype'] = ""
            temp = []
            if vuln['articleUrl1']:
                temp.append(vuln['articleUrl1'])
            if vuln['articleUrl2']:
                temp.append(vuln['articleUrl2'])
            if vuln['articleUrl3']:
                temp.append(vuln['articleUrl3'])
            if vuln['articleUrl4']:
                temp.append(vuln['articleUrl4'])
            ripecve['references'] = " | ".join(temp)
            ripecve['description'] = ""
            ripecve['configurations'] = ""  # 暂空
            ripecve['impact_baseScore'] = None
            ripecve['impact_baseSeverity'] = str.upper(vuln['severity'])
            ripecve['impact_impactScore'] = None
            ripecve['impact_exploitabilityScore'] = None
            ripecve['publishedDate'] = vuln['publishedDate']
            ripecve['lastModifiedDate'] = vuln['publishedDate']
            # ripecve['isNotified'] = None  # 删除，否者每次merge时会被重置。
            ripecve['lastTouchTime'] = datetime.datetime.now().isoformat()

            v = Vuln(ripecve)
            self.dbsession.merge(v)
            self.dbsession.commit()
        pass

    def _process(self):
        session = requests.session()
        proxies = {"http":"http://127.0.0.1:8080", "https":"https://127.0.0.1:8080"}
        headers = {}
        rawheaders = '''
Accept: application/json, text/plain, */*
Origin: https://portal.msrc.microsoft.com
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36
Content-Type: application/json;charset=UTF-8
Referer: https://portal.msrc.microsoft.com/en-us/security-guidance
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7,zh-TW;q=0.6
        '''
        for h in rawheaders.split("\n"):
            if ":" in h:
                kv = h.strip().split(": ",1)
                headers[kv[0]] = kv[1]
        # print(headers)
        # 读取meta信息，提取时间和hash值
        try:
            print("\t[ %s ] - Checking updates...([POST]%s)"% (sourceName, self.vulnURL))
            data = '{"familyIds":[],"productIds":[],"severityIds":[1,2],"impactIds":[],"pageNumber":1,"pageSize":9999,"includeCveNumber":true,"includeSeverity":true,"includeImpact":true,"orderBy":"publishedDate","orderByMonthly":"releaseDate","isDescending":true,"isDescendingMonthly":true,"queryText":"","isSearch":false,"filterText":"","fromPublishedDate":"%s","toPublishedDate":"%s"}'\
                   %((datetime.datetime.now()+datetime.timedelta(-2)).strftime("%m/%d/%Y"),datetime.datetime.now().strftime("%m/%d/%Y"))
            r = session.post(self.vulnURL,headers=headers, data=data , timeout=60)
            # print(r.text[:1000])
            metaTime = datetime.datetime.now().isoformat()  # 当前时间作为metatime
            hash = hashlib.md5()
            hash.update(r.content)
            metaHash = hash.hexdigest() # 取数据内容的md5值作为hash

        except Exception as e:
            print("\t[ %s ] - Checking updates\tFailed!!!"%(sourceName))
            logging.debug(e)
            return

        # 读取配置文件中的记录相对比
        confTime, confHash = config.get_lastUpdate(sourceName)

        # 对比
        if confHash != metaHash:
            print("\t[ %s ] - Found some updates, dealing..." % (sourceName))
            print("\t[ %s ] - File size :: %d bytes"%(sourceName,len(r.content)))
            try:
                content = r.content.decode() # 解决Linux上问题：the JSON object must be str, not 'bytes'
                rawjson = json.loads(content)
                self.__arrangeVuln(rawjson['details'])
                config.set_lastUpdate(sourceName, metaTime, metaHash)
                print("\t[ %s ] - Success!!!" % (sourceName))
            # try:
            #     pass
            except json.JSONDecodeError as e:
                print("\t[ %s ] - JSON Decode Error :: %s" % (sourceName,e))
            except Exception as e:
                print("\t[ %s ] - Encounter an Error : %s" % (sourceName,e))

        else:
            # 源数据未更新，更新一下操作时间。
            config.set_lastUpdate(sourceName, metaTime, metaHash)
            print("\t[ %s ] - There is no updates!!!" % (sourceName))
        try:
            self.dbsession.close()
        except:
            pass

def __test():
    db = Database()
    db.db_init()
    dbsession = db.db_session()

    test = Spider(dbsession)
    result, e = test.get_vulns()
    if not result:
        print(e)


if __name__ == "__main__":
    __test()
    # print(datetime.datetime.utcnow())
    # lastModifiedDate = '2018-04-12T01:00:30-0400'
    # t =  datetime.datetime.strptime(lastModifiedDate,'%Y-%m-%dT%H:%M:%S%z')
    # print(t)