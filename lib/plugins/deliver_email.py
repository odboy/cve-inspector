# !/usr/bin/env python3
# -*- coding: utf-8 -*-
# Author: Mr.Bingo@猎户实验室

from lib.plugins.base_deliver import BaseDeliver
import json
import time
import smtplib
import logging
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
from email.header import Header

'''
{
  "deliver": {
    "name":"email",
    "module_name":"deliver_email",
    "smtp": "smtp.ym.163.com",
    "sender_address": "noreply@oddboy.cn",
    "sender_password": "!4nDqXC27Co",
    "receiver": [{
      "address":"songgongbin@tass.com.cn"
    },{
      "address":"ob@oddboy.cn"
    }]
  }
}
'''
class Deliver(BaseDeliver):
    def __init__(self, conf):
        self.conf = conf
        self.deliver_name = conf['deliver']['name']
        self.smtp_server = conf['deliver']['smtp_server']
        self.smtp_port = conf['deliver']['smtp_port']
        self.sender = conf['deliver']['sender_address']
        self.password = conf['deliver']['sender_password']
        self.receiver = []
        for r in conf['deliver']['receiver']:
            self.receiver.append(r['address'])
        # print(self.receiver)
        self.result = False

    def _process(self, vulninfo):
        '''
        实际发送邮件
        :param vulninfo: 漏洞信息
        :return:
        '''
        if len(self.receiver)<=0 or len(vulninfo)<=0:
            print('\t[ %s ] - Error | no receiver or no vuln' % (self.deliver_name ))
            return self.result

        # 整理vulninfo
        # print(json.dumps(vulninfo, indent=2))

        vulnmsg = []
        for vuln in vulninfo:
            # print(json.dumps(vuln, indent=2))
            vulnmsg.append( ('<tr><td width=100px style="text-align:center;background-color:lightgrey"><span style="color:#9933E5;"><strong>%s</strong></span></td><td colspan="3">%s</td></tr>\n' %(str(vuln['impact_baseSeverity']),str(vuln['vulnID']+ (" || "+ vuln['title'] if vuln['title'] else ''))))\
                + ('<tr><td style="text-align:center;background-color:lightgrey">%s</td><td colspan="3">%s</td></tr>\n'%("Source",str(vuln["dataSource"])))\
                + ('<tr><td style="text-align:center;background-color:lightgrey">%s</td><td colspan="3">%s</td></tr>\n' % ("Affects", str(vuln["sourceURL"])))\
                + ('<tr><td style="text-align:center;background-color:lightgrey">%s</td><td colspan="3">%s</td></tr>\n' % ("Summy", str(vuln["description"])))\
                + ('<tr><td style="text-align:center;background-color:lightgrey">%s</td><td colspan="3">%s</td></tr>\n' % ("References", str(vuln["references"])))\
                + ('<tr><td style="text-align:center;background-color:lightgrey" >%s</td><td>%s</td><td width=100px style="text-align:center;background-color:lightgrey">%s</td><td>%s</td></tr>\n' % ("Publish Time", str(vuln["publishedDate"]),"Update Time",str(vuln['lastModifiedDate']))))

        msg = '<table style="width:750px;" cellspacing="0" cellpadding="8" border="1"><tbody>%s</tbody></table>' % "<tr height = 30></tr>".join(vulnmsg)

        mail_msg = """
        <html>
        <head>
        <meta http-equiv="content-type" content="text/html;charset=utf-8">
        </head>
        <body><div width=750 margin: auto;>
        %s
        </div></body>
        </html>
        """%msg

        # print(mail_msg)
        # with open("msg.html","w") as fp:
        #     fp.write(mail_msg)

        message = MIMEMultipart('alternative')
        message['From'] = self.sender
        message['To'] = ",".join(self.receiver)
        subject = '最新漏洞和CVE告警信息 - %s'% time.strftime("%Y-%m-%d %H:%M")
        message['Subject'] = Header(subject, 'utf-8')
        message.attach(MIMEText(mail_msg, 'html', 'utf-8'))

        # 发送
        try:
            print('\t[ %s ] - Sending (%s)' % (self.deliver_name, " | ".join(self.receiver)))
            smtpObj = smtplib.SMTP_SSL(self.smtp_server, self.smtp_port)
            smtpObj.login(self.sender, self.password)
            smtpObj.sendmail(self.sender, self.receiver, message.as_string())
            smtpObj.quit()
            print('\t[ %s ] - Success'%(self.deliver_name))
            self.result = True
        except smtplib.SMTPException as e:
            print('\t[ %s ] - Error' % (self.deliver_name))
            self.result = False
            logging.debug(e)
        return self.result