# !/usr/bin/env python3
# -*- coding: utf-8 -*-
# Author: Mr.Bingo@猎户实验室
# dataSource :: https://nvd.nist.gov/vuln/data-feeds


import os
import io
import json
import datetime
import time
import requests
import re
import zipfile
import logging
import hashlib

from lib.plugins.base_spider import BaseSpider
from lib.common.utils import *
from lib.Modles import Vuln
from lib.database import Database
import config.config as config

sourceName = 'CISCO'

class CVE(Vuln):
    def __init__(self,v):
        #  格式化数据
        for a, b in v.items():
            setattr(self, a, b if isinstance(b, (int, str, float)) else None)


class Spider(BaseSpider):
    def __init__(self, dbsession):
        self.dbsession = dbsession
        self.result = []
        self.vulnURL = "https://tools.cisco.com/security/center/publicationService.x?criteria=exact&limit=100&offset=0&publicationTypeIDs=1,3,6,9&securityImpactRatings=critical,high&sort=-day_sir"


    def __arrangeVuln(self,rawjson):
        for vuln in rawjson:
            '''
{
    "identifier": "57956",
    "title": "procps-ng file2strvec Function Local Privilege Escalation Vulnerability",
    "version": "1",
    "firstPublished": "2018-05-24T20:27:36.423+0000",
    "lastPublished": "2018-05-24T20:27:36.423+0000",
    "workflowStatus": null,
    "id": 6,
    "name": "Vulnerability Alert",
    "url": "https://tools.cisco.com/security/center/viewAlert.x?alertId=57956",
    "severity": "High",
    "cwe": "CWE-119",
    "cve": "CVE-2018-1124",
    "ciscoBugId": "",
    "status": "New",
    "summary": "A vulnerability in the file2strvec() function of the libprocps library used by procps-ng could allow a local attacker to gain elevated privileges on a targeted system.The vulnerability is due to multiple integer overflow conditions that could lead to a heap ",
    "totalCount": 12675,
    "relatedResource": []
}
            '''
            ripecve = {}
            ripecve['dataSource'] = sourceName
            ripecve['title'] = vuln['title']
            ripecve['vulnID'] = vuln['cve']
            ripecve['identifier'] = vuln['identifier']
            ripecve['sourceURL'] = vuln['url']
            ripecve['affects'] = ''
            ripecve['problemtype'] = vuln['cwe']
            ripecve['references'] = "https://nvd.nist.gov/vuln/detail/"+ripecve['vulnID']
            ripecve['description'] = vuln['summary']
            ripecve['configurations'] = ""  # 暂空
            ripecve['impact_baseScore'] = None
            ripecve['impact_baseSeverity'] = str.upper(vuln['severity'])
            ripecve['impact_impactScore'] = None
            ripecve['impact_exploitabilityScore'] = None
            ripecve['publishedDate'] = vuln['firstPublished']
            ripecve['lastModifiedDate'] = vuln['lastPublished']
            # ripecve['isNotified'] = None  # 删除，否者每次merge时会被重置。
            ripecve['lastTouchTime'] = datetime.datetime.now().isoformat()

            v = Vuln(ripecve)
            self.dbsession.merge(v)
            self.dbsession.commit()
        pass

    def _process(self):
        session = requests.session()
        # proxies = {"http":"http://127.0.0.1:8080", "https":"https://127.0.0.1:8080"}
        headers = {"User-Agent" : "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:59.0) Gecko/20100101 Firefox/59.0"}
        # 读取meta信息，提取时间和hash值
        try:
            print("\t[ %s ] - Checking updates...(%s)"% (sourceName, self.vulnURL))
            # r = session.get(self.data_feeds,timeout=60)
            # r = requests.get(self.meta_url, timeout=30)
            r = session.get(self.vulnURL, timeout=30)
            metaTime = datetime.datetime.now().isoformat()  # 当前时间作为metatime
            hash = hashlib.md5()
            hash.update(r.content)
            metaHash = hash.hexdigest() # 取数据内容的md5值作为hash

        except Exception as e:
            print("\t[ %s ] - Checking updates\tFailed!!!"%(sourceName))
            logging.debug(e)
            return

        # 读取配置文件中的记录相对比
        confTime, confHash = config.get_lastUpdate(sourceName)

        # 对比
        if confHash != metaHash:
            print("\t[ %s ] - Found some updates, dealing..." % (sourceName))
            print("\t[ %s ] - File size :: %d bytes"%(sourceName,len(r.content)))
            # try:
            content = r.content
            rawjson = json.loads(content)
            self.__arrangeVuln(rawjson)
            config.set_lastUpdate(sourceName, metaTime, metaHash)
            print("\t[ %s ] - Success!!!" % (sourceName))
            try:
                pass
            except json.JSONDecodeError as e:
                print("\t[ %s ] - JSON Decode Error :: %s" % (sourceName,e))
            except Exception as e:
                print("\t[ %s ] - Encounter an Error : %s" % (sourceName,e))

        else:
            # 源数据未更新，更新一下操作时间。
            config.set_lastUpdate(sourceName, metaTime, metaHash)
            print("\t[ %s ] - There is no updates!!!" % (sourceName))
        try:
            self.dbsession.close()
        except:
            pass

def __test():
    db = Database()
    db.db_init()
    dbsession = db.db_session()

    test = Spider(dbsession)
    result, e = test.get_vulns()
    if not result:
        print(e)


if __name__ == "__main__":
    __test()
    # print(datetime.datetime.utcnow())
    # lastModifiedDate = '2018-04-12T01:00:30-0400'
    # t =  datetime.datetime.strptime(lastModifiedDate,'%Y-%m-%dT%H:%M:%S%z')
    # print(t)