# !/usr/bin/env python3
# -*- coding: utf-8 -*-
# Author: Mr.Bingo@猎户实验室
# dataSource :: https://pivotal.io/security/


import os
import io
import json
import datetime
import time
import requests
import re
import zipfile
import logging
import hashlib
import feedparser

from lib.plugins.base_spider import BaseSpider
from lib.common.utils import *
from lib.Modles import Vuln
from lib.database import Database
import config.config as config

sourceName = 'PIVOTAL'

class CVE(Vuln):
    def __init__(self,v):
        #  格式化数据
        for a, b in v.items():
            setattr(self, a, b if isinstance(b, (int, str, float)) else None)


class Spider(BaseSpider):
    def __init__(self, dbsession):
        self.dbsession = dbsession
        self.result = []
        self.vulnURL = "https://pivotal.io/security/rss"

    def __arrangeVuln(self,rawrss):
        for vuln in rawrss['entries']:
            '''
{
    "title": "CVE-2018-8037: Apache Tomcat - NIO/NIO2 connectors user sessions can get mixed up",
    "title_detail": {
        "type": "text/plain",
        "language": None,
        "base": "https://pivotal.io/security/rss",
        "value": "CVE-2018-8037: Apache Tomcat - NIO/NIO2 connectors user sessions can get mixed up"
    },
    "links": [{
        "rel": "alternate",
        "type": "text/html",
        "href": "https://pivotal.io/security/cve-2018-8037"
    }],
    "link": "https://pivotal.io/security/cve-2018-8037",
    "summary": "<h1>CVE-2018-8037: Apache Tomcat - NIO/NIO2 connectors user......",
        "summary_detail": {
            "type": "text/html",
            "language": None,
            "base": "https://pivotal.io/security/rss",
            "value": "<h1>CVE-2018-8037: Apache Tomcat - NIO/NIO2 connectors user ...."
        },
    "id": "https://pivotal.io/security/cve-2018-8037",
    "guidislink": False,
    "published": "Thu, 09 Aug 2018 00:00:00 +0000",
    "published_parsed": time.struct_time(tm_year = 2018, tm_mon = 8, tm_mday = 9, tm_hour = 0, tm_min = 0, tm_sec = 0, tm_wday = 3, tm_yday = 221, tm_isdst = 0)
}
            '''
            ripecve = {}
            ripecve['dataSource'] = sourceName
            ripecve['title'] = vuln['title']
            ripecve['vulnID'] = vuln['id'].split("/")[-1]
            ripecve['identifier'] = sourceName+"."+vuln['id'].split("/")[-1]
            ripecve['sourceURL'] = vuln['link']
            ripecve['affects'] = ''
            ripecve['problemtype'] = ""
            ripecve['references'] = vuln['id']
            ripecve['description'] = vuln['summary']
            ripecve['configurations'] = ""  # 暂空
            ripecve['impact_baseScore'] = None
            ripecve['affects'] = ''
            ripecve['impact_baseSeverity'] =  str.upper(re.search(r'<h2>Severity<\/h2><p>(\w+)<\/p>',vuln['summary']).group(1))
            ripecve['impact_impactScore'] = None
            ripecve['impact_exploitabilityScore'] = None
            ripecve['publishedDate'] = vuln['published']
            ripecve['lastModifiedDate'] = vuln['published']
            # ripecve['isNotified'] = None  # 删除，否者每次merge时会被重置。
            ripecve['lastTouchTime'] = datetime.datetime.now().isoformat()

            v = Vuln(ripecve)
            self.dbsession.merge(v)
            self.dbsession.commit()
        pass

    def _process(self):
        session = requests.session()
        # proxies = {"http":"http://127.0.0.1:8080", "https":"https://127.0.0.1:8080"}
        headers = {"User-Agent" : "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:59.0) Gecko/20100101 Firefox/59.0"}
        # 读取meta信息，提取时间和hash值
        try:
            print("\t[ %s ] - Checking updates...(%s)"% (sourceName, self.vulnURL))
            d = feedparser.parse(self.vulnURL)
            hash = hashlib.md5()
            hash.update(str(d.entries).encode())
            metaHash = hash.hexdigest() # 取rss的entries内容的md5值作为hash，整个rss报文中，包含每次都会变动的etag、published，所以不能取全文hash.
            metaTime = datetime.datetime.now().isoformat()  # 当前时间作为metatime
        except Exception as e:
            print("\t[ %s ] - Checking updates\tFailed!!!"%(sourceName))
            logging.debug(e)
            return

        # 读取配置文件中的记录相对比
        confTime, confHash = config.get_lastUpdate(sourceName)

        # 对比
        if confHash != metaHash:
            print("\t[ %s ] - Found some updates, dealing..." % (sourceName))
            print("\t[ %s ] - File size :: %d bytes"%(sourceName,len(str(d))))
            # try:
            self.__arrangeVuln(d)
            config.set_lastUpdate(sourceName, metaTime, metaHash)
            print("\t[ %s ] - Success!!!" % (sourceName))
            try:
                pass
            except Exception as e:
                print("\t[ %s ] - Encounter an Error : %s" % (sourceName,e))

        else:
            # 源数据未更新，更新一下操作时间。
            config.set_lastUpdate(sourceName, metaTime, metaHash)
            print("\t[ %s ] - There is no updates!!!" % (sourceName))
        try:
            self.dbsession.close()
        except:
            pass

def __test():
    db = Database()
    db.db_init()
    dbsession = db.db_session()

    test = Spider(dbsession)
    result, e = test.get_vulns()
    if not result:
        print(e)


def __test_feedparser():
    rss_url = "https://pivotal.io/security/rss"
    d = feedparser.parse(rss_url)
    print(d['feed']['title'])
    print(d.feed.updated)
    print(d.etag)
    # print(d)
    # print(d.entries[0].title)
    for entry in d.entries:
        print(entry.title)
        print(entry.link)
        print(entry.published)
        print(entry.summary)


    hash = hashlib.md5()
    hash.update(str(d.entries).encode())
    print(hash.hexdigest())


if __name__ == "__main__":
    __test_feedparser()



    # https://pivotal.io/security/rss
    # print(datetime.datetime.utcnow())
    # lastModifiedDate = '2018-04-12T01:00:30-0400'
    # t =  datetime.datetime.strptime(lastModifiedDate,'%Y-%m-%dT%H:%M:%S%z')
    # print(t)