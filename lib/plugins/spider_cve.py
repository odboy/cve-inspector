# !/usr/bin/env python3
# -*- coding: utf-8 -*-
# Author: Mr.Bingo@猎户实验室
# dataSource :: https://nvd.nist.gov/vuln/data-feeds

# 参考资料
# https://blog.csdn.net/qiyu93422/article/details/72667901

import os
import io
import json
import datetime
import time
import requests
import re
import zipfile
import logging

from lib.plugins.base_spider import BaseSpider
from lib.common.utils import *
from lib.Modles import Vuln
from lib.database import Database
import config.config as config

sourceName = 'CVE'

class CVE(Vuln):
    def __init__(self,v):
        #  格式化数据
        for a, b in v.items():
            setattr(self, a, b if isinstance(b, (int, str, float)) else None)


class Spider(BaseSpider):
    def __init__(self, dbsession):
        self.dbsession = dbsession
        self.result = []
        self.data_feeds = "https://nvd.nist.gov/vuln/data-feeds"
        self.meta_url = "https://nvd.nist.gov/feeds/json/cve/1.0/nvdcve-1.0-recent.meta"
        self.zip_url = "https://nvd.nist.gov/feeds/json/cve/1.0/nvdcve-1.0-recent.json.zip"


    def __arrangeCVE(self,rawjson):
        CVE_Items = rawjson["CVE_Items"]
        for cve in CVE_Items:
            ripecve = {}
            ripecve['dataSource'] = sourceName
            ripecve['vulnID'] = cve['cve']["CVE_data_meta"]['ID']
            ripecve['id'] = ripecve['vulnID']
            ripecve['sourceURL'] = "https://nvd.nist.gov/vuln/detail/" + ripecve['vulnID']
            # if ripecve['cveID'] != 'CVE-2018-9923':
            #     continue
            try:
                tmpAffects = ""
                tmpProductName = ""
                tmpProductData = []
                tmpVersion = []
                tmpdict = cve['cve']['affects']['vendor']['vendor_data']
                for i in tmpdict:
                    tmpVendorData = i['vendor_name']
                    try:
                        for j in i['product']['product_data']:
                            tmpProductName = j['product_name']
                            try:
                                for k in j['version']['version_data']:
                                    tmpVersion.append(k['version_value'])

                                tmpProductData.append("%s - %s( %s )" % (tmpVendorData, tmpProductName, ' | '.join(tmpVersion)))
                            except Exception as e:
                                tmpProductData.append("%s - %s" % (tmpVendorData, tmpProductName))
                                logging.info(e)
                    except Exception as e:
                        tmpProductData.append("%s" % (tmpVendorData))
                        logging.debug(e)

                tmpAffects = " \n".join(tmpProductData)
            except:
                tmpAffects = None

            ripecve['affects'] = tmpAffects
            try:
                tmpA = cve['cve']['problemtype']['problemtype_data'][0]['description']
                tmpB = []
                for i in tmpA:
                    tmpC = i['value']
                    tmpB.append(("%s(https://cwe.mitre.org/data/definitions/%s.html)"%(tmpC,tmpC.split("-")[1])))
            except Exception as e:
                logging.debug(e)
                tmpB = []

            ripecve['problemtype'] = " \n".join(tmpB)
            tmpB = []
            try:
                tmpA = cve['cve']['references']['reference_data']
                for i in tmpA:
                    tmpB.append(i['url'])
            except Exception as e:
                pass

            ripecve['references'] = " \n".join(tmpB)

            tmpB = []
            try:
                tmpA = cve['cve']['description']['description_data']
                for i in tmpA:
                    tmpB.append(i['value'])
            except Exception as e:
                pass

            ripecve['description'] = " \n\n".join(tmpB)
            ripecve['configurations'] = ""  # 暂空
            try:
                tmp = cve['impact']['baseMetricV3']['cvssV3']['baseScore']
            except:
                tmp = None
            ripecve['impact_baseScore'] = tmp
            try:
                tmp = cve['impact']['baseMetricV3']['cvssV3']['baseSeverity']
            except:
                tmp = None
            ripecve['impact_baseSeverity'] = tmp
            try:
                tmp = cve['impact']['baseMetricV3']['impactScore']
            except:
                tmp = None
            ripecve['impact_impactScore'] = tmp
            try:
                tmp = cve['impact']['baseMetricV3']['exploitabilityScore']
            except:
                tmp = None
            ripecve['impact_exploitabilityScore'] = tmp
            ripecve['publishedDate'] = cve['publishedDate']
            ripecve['lastModifiedDate'] = cve['lastModifiedDate']
            # ripecve['isNotified'] = None  # 删除，否者每次merge时会被重置。
            ripecve['lastTouchTime'] = datetime.datetime.now().isoformat()

            vuln = Vuln(ripecve)
            self.dbsession.merge(vuln)
            self.dbsession.commit()
        pass


    def _process(self):
        session = requests.session()
        # proxies = {"http":"http://127.0.0.1:8080", "https":"https://127.0.0.1:8080"}
        headers = {"User-Agent" : "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:59.0) Gecko/20100101 Firefox/59.0"}
        # 读取meta信息，提取时间和hash值
        try:
            print("\t[ %s ] - Checking updates...(%s)"% (sourceName, self.meta_url))
            # r = session.get(self.data_feeds,timeout=60)
            # r = requests.get(self.meta_url, timeout=30)
            r = session.get(self.meta_url, timeout=30)
            metaTime = re.search(r'lastModifiedDate:(.*?)\s', r.text).group(1)
            metaHash = re.search(r'sha256:(.*?)\s', r.text).group(1)

        except Exception as e:
            print("\t[ %s ] - Checking updates\tFailed!!!"%(sourceName))
            logging.debug(e)
            return

        # 读取配置文件中的记录相对比
        confTime, confHash = config.get_lastUpdate(sourceName)

        # 对比
        if confHash != metaHash:
            # 下载zip文件并解压缩。
            # https://techoverflow.net/2018/01/16/downloading-reading-a-zip-file-in-memory-using-python/
            print("\t[ %s ] - Downloading %s" % (sourceName,self.zip_url))

            try:
                r = session.get(self.zip_url,headers=headers, timeout=120)
                session.close()
                print("\t[ %s ] - File size :: %d bytes"%(sourceName,len(r.content)))
            except TimeoutError:
                print("\t[ %s ] - [Error]\tTimeout!!!"%(sourceName))
                return
            except Exception as e:
                print("\t[ %s ] - [Error]"%(sourceName))
                logging.debug("\t[ %s ] - %s\t" % (sourceName, e))
                return
            with zipfile.ZipFile(io.BytesIO(r.content)) as thezip:
                for zipinfo in thezip.infolist():
                    print("\t[ %s ] - Dealing < %s >" % (sourceName,zipinfo.filename))
                    with thezip.open(zipinfo) as thefile:
                        try:
                            content = thefile.read().decode("utf-8")
                            rawjson = json.loads(content)
                            # rawjson = json.load(thefile)  # 解决Linux上问题：the JSON object must be str, not 'bytes'
                            self.__arrangeCVE(rawjson)
                            config.set_lastUpdate('cve', metaTime, metaHash)
                            print("\t[ %s ] - Success!!!" % (sourceName))
                        except json.JSONDecodeError:
                            print("\t[ %s ] - Failed!!!" % (sourceName))
                        except Exception as e:
                            print("\t[ %s ] - encounter a error : %s" % (sourceName,e))

        else:
            # 源数据未更新，更新一下操作时间。
            config.set_lastUpdate('cve', metaTime, metaHash)
            print("\t[ %s ] - There is no updates!!!" % (sourceName))
        try:
            self.dbsession.close()
        except:
            pass

def __test():
    db = Database()
    db.db_init()
    dbsession = db.db_session()

    testCVE = Spider(dbsession)
    result, e = testCVE.get_vulns()
    if not result:
        print(e)


if __name__ == "__main__":
    __test()
    # print(datetime.datetime.utcnow())
    # lastModifiedDate = '2018-04-12T01:00:30-0400'
    # t =  datetime.datetime.strptime(lastModifiedDate,'%Y-%m-%dT%H:%M:%S%z')
    # print(t)