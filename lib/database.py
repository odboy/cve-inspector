# !/usr/bin/env python3
# -*- coding: utf-8 -*-
# Author: Mr.Bingo@猎户实验室


import os
from sqlalchemy import create_engine, Column, Integer, String, Float,Boolean , Sequence
from lib.Modles import BaseModle    # declarative_base()
from sqlalchemy.orm import relationship, sessionmaker
from config.config import configs



class Database(object):
    def __init__(self, sqlalchemyBase=object ,identifier=None, cursor=None, query=None):
        self.sqlalchemyBase     =   sqlalchemyBase
        self.identifier         =   identifier
        self.conn               =   None
        self.cur                =   cursor
        self.query              =   query
        self.db                 =   configs.get('db_path')
        self.DBengine           =   None
        self.DBsession          =   None

    def db_session(self):
        """
        Create a DBsession instance
        :return:
        """
        return self.DBsession()

    def db_init(self):
        # 如果目标数据库尚不存在，提示是否创建。
        if not os.path.isfile(self.db):
            foo = input("%The Database file ( %s ) not exist, Create? (Y/n)".format(str(self.db)))
            # foo = input("%The Database file ( s ) not exist, Create? (Y/n)")
            if str.upper(foo) != 'Y' and len(str.strip()) == 0:  # 退出
                print("\nCancel!!!\n")
                return

        try:
            # 链接数据库   '数据库类型+数据库驱动名称://用户名:口令@机器地址:端口号/数据库名'
            self.DBengine = create_engine("sqlite:///" + self.db, echo=False)  # echo - logging标志

            # Create a Schema
            BaseModle.metadata.create_all(self.DBengine)

            # Create a DBsession
            self.DBsession  =   sessionmaker(bind=self.DBengine)

        except Exception as e:
            return "[error] something occurred while create the database", e

        return 0



if __name__ == "__main__":
    pass
    # db = Database()
    # db.db_init()
